//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication.SoftwareServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Software", Namespace="http://schemas.datacontract.org/2004/07/ProductsAPI")]
    [System.SerializableAttribute()]
    public partial class Software : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicenceTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RankField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicenceType {
            get {
                return this.LicenceTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenceTypeField, value) != true)) {
                    this.LicenceTypeField = value;
                    this.RaisePropertyChanged("LicenceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rank {
            get {
                return this.RankField;
            }
            set {
                if ((this.RankField.Equals(value) != true)) {
                    this.RankField = value;
                    this.RaisePropertyChanged("Rank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SoftwareServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSoftwares", ReplyAction="http://tempuri.org/IService1/GetSoftwaresResponse")]
        WebApplication.SoftwareServiceReference.Software[] GetSoftwares();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSoftwares", ReplyAction="http://tempuri.org/IService1/GetSoftwaresResponse")]
        System.Threading.Tasks.Task<WebApplication.SoftwareServiceReference.Software[]> GetSoftwaresAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddSoftware", ReplyAction="http://tempuri.org/IService1/AddSoftwareResponse")]
        int AddSoftware(string Name, string Version, string LicenceType, int Rank);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddSoftware", ReplyAction="http://tempuri.org/IService1/AddSoftwareResponse")]
        System.Threading.Tasks.Task<int> AddSoftwareAsync(string Name, string Version, string LicenceType, int Rank);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSoftwareById", ReplyAction="http://tempuri.org/IService1/GetSoftwareByIdResponse")]
        WebApplication.SoftwareServiceReference.Software GetSoftwareById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSoftwareById", ReplyAction="http://tempuri.org/IService1/GetSoftwareByIdResponse")]
        System.Threading.Tasks.Task<WebApplication.SoftwareServiceReference.Software> GetSoftwareByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateSoftware", ReplyAction="http://tempuri.org/IService1/UpdateSoftwareResponse")]
        int UpdateSoftware(int Id, string Name, string Version, string LicenceType, int Rank);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateSoftware", ReplyAction="http://tempuri.org/IService1/UpdateSoftwareResponse")]
        System.Threading.Tasks.Task<int> UpdateSoftwareAsync(int Id, string Name, string Version, string LicenceType, int Rank);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteSoftwareById", ReplyAction="http://tempuri.org/IService1/DeleteSoftwareByIdResponse")]
        int DeleteSoftwareById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteSoftwareById", ReplyAction="http://tempuri.org/IService1/DeleteSoftwareByIdResponse")]
        System.Threading.Tasks.Task<int> DeleteSoftwareByIdAsync(int Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WebApplication.SoftwareServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WebApplication.SoftwareServiceReference.IService1>, WebApplication.SoftwareServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WebApplication.SoftwareServiceReference.Software[] GetSoftwares() {
            return base.Channel.GetSoftwares();
        }
        
        public System.Threading.Tasks.Task<WebApplication.SoftwareServiceReference.Software[]> GetSoftwaresAsync() {
            return base.Channel.GetSoftwaresAsync();
        }
        
        public int AddSoftware(string Name, string Version, string LicenceType, int Rank) {
            return base.Channel.AddSoftware(Name, Version, LicenceType, Rank);
        }
        
        public System.Threading.Tasks.Task<int> AddSoftwareAsync(string Name, string Version, string LicenceType, int Rank) {
            return base.Channel.AddSoftwareAsync(Name, Version, LicenceType, Rank);
        }
        
        public WebApplication.SoftwareServiceReference.Software GetSoftwareById(int id) {
            return base.Channel.GetSoftwareById(id);
        }
        
        public System.Threading.Tasks.Task<WebApplication.SoftwareServiceReference.Software> GetSoftwareByIdAsync(int id) {
            return base.Channel.GetSoftwareByIdAsync(id);
        }
        
        public int UpdateSoftware(int Id, string Name, string Version, string LicenceType, int Rank) {
            return base.Channel.UpdateSoftware(Id, Name, Version, LicenceType, Rank);
        }
        
        public System.Threading.Tasks.Task<int> UpdateSoftwareAsync(int Id, string Name, string Version, string LicenceType, int Rank) {
            return base.Channel.UpdateSoftwareAsync(Id, Name, Version, LicenceType, Rank);
        }
        
        public int DeleteSoftwareById(int Id) {
            return base.Channel.DeleteSoftwareById(Id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteSoftwareByIdAsync(int Id) {
            return base.Channel.DeleteSoftwareByIdAsync(Id);
        }
    }
}
